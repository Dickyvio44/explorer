<% if innovation_in_blockchain? %>
  <div class="row">
    <div class="col-12 col-lg-12 mb-4">
      <div class="card">
        <div id="Latest-Trades-of-Token-in-Network"></div>
      </div>
    </div>
  </div>
  <script>
    class LatestTradesofTokeninNetwork extends BootstrapTableComponent {
      configuration() {
        return  {
          topElement: function (response){ return response.EVM.DEXTradeByTokens},
            chainId: function (response){ return response.EVM.DEXTradeByTokens[0].ChainId},
          columns: [
            {
              name: 'Timestamp', cell: function(row){ return row.Block.Time}, rendering: renderDate,
            },
            {
              name: 'Block', cell: function(row){ return row.Block.Number }, rendering: renderBlockLink
            },
            {
              name: 'Seller', cell: function(row) { return row.Trade.Seller}, rendering: renderJustAddressLink
            },
            {
            name: 'Sell amount',cell: function(row) {return parseFloat(row.Trade.Amount).toFixed(3)}
            },
            {
            name: 'Sell currency', cell: function(row) { return row.Trade.Currency.Symbol},
            },
            {
              name: '', cell: function(row) { return '' }, rendering: renderSenderRecieverIcon
            },
            {
              name: 'Buyer', cell: function(row) {return row.Trade.Buyer},
              rendering: renderJustAddressLink
            },
            {
              name: 'Buy amount',
              cell: function(row) {
                return parseFloat(row.Trade.Side.Amount).toFixed(3)
              }
            },
            {
            name: 'Buy currency', cell: function(row) { return row.Trade.Side.Currency.Symbol},
            },
            {
              name: 'Price',
              cell: function(row) {
                return parseFloat(row.Trade.Price).toFixed(3)
              }
            },
            {
              name: 'Transaction',
              cell: function(row) {
                return row.Transaction.Hash
              },
              rendering: renderJustAddressLink
            }
          ]
        }
      }
    }
    const variables = {
      network:'<%= @streaming%>',
      limit: 10,
      offset: 0,
      address: '<%= @address %>',
      token: '<%= @address %>',
      id: '<%= @id %>',
    }
    renderWithTime(variables,<%= limited_date_range_limit(@from, @till).join(',').html_safe %>, function f(variables){
      renderComponent(LatestTradesofTokeninNetwork, "#Latest-Trades-of-Token-in-Network",'Latest-Trades-of-Token-in-Network',variables);
    })
  </script>
<% end %>
