<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div  id="NFT-token-information" class="card"></div>
  </div>
</div>
<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div  id="Popular-Token-IDs" class="card"></div>
  </div>
</div>
<div class="row mb-4">
  <div class="col-12 col-lg-7">
    <div class="card" id="Top-NFT-Holders"></div>
  </div>
  <div class="col-12 col-lg-5">
    <div class="card" id="Top-NFT-Holders-Pie"></div>
  </div>
</div>
<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div  id="Subscription-for-the-Latest-Trades-of-NFT-Token" class="card"></div>
  </div>
</div>
<script >
  class NFTTokenInformation extends BootstrapVerticalTableComponent {
    configuration() {
      return  {
        topElement: function (response){ return response.EVM.BalanceUpdates},
        chainId: function (response){ return response.EVM.BalanceUpdates[0].ChainId},
        columns: [
          {
            name: 'Name', cell: function(row){ return row.Currency.Name},
          },
          {
            name: 'Symbol', cell: function(row){ return row.Currency.Symbol},
          },
          {
            name: 'Unique IDs', cell: function(row){ return row.ids},
          },
          {
            name: 'Unique Holders', cell: function(row){ return row.holders},
          },
          {
            name: 'Transfers', cell: function(row){ return (row.updates)/2},
          },
          {
            name: 'First transfer', cell: function(row){ return row.Block.first}, rendering: renderDate,
          },
          {
            name: 'Last transfer', cell: function(row){ return row.Block.last},  rendering: renderDate,
          },
        ]
      }
    }
  }
  class PopularTokenIDsNFT extends BootstrapCardComponent {
    configuration() {
      return  {
        topElement: function (response){ return response.EVM.Transfers},
        chainId: function (response){ return response.EVM.Transfers[0].ChainId},
        image: [
          {
            cell: function(row){ return row.Transfer.URI}, rendering: renderImgFromURI,
          }
            ] ,
        columns: [
          {
            name: 'ID',cell: function(row){ return {id:row.Transfer.Id, address:row.Transfer.Currency.SmartContract}},rendering: renderIdLink
          },
          {
            name: "Transfers Count", cell: function(row){ return row.count},
          },
          {
            name: 'Unique Receivers', cell: function(row){ return row.receivers},
          },
          {
            name: 'Last Receiver',  cell: function(row){ return row.Transfer.last_receiver}, rendering: renderAddressLink
          },
        ]
      }
    }
  }
  class TopNFTHolders extends BootstrapTableComponent {
    configuration() {
      return  {
        topElement: function (response){ return response.EVM.BalanceUpdates},
        chainId: function (response){return response.EVM.BalanceUpdates[0].ChainId},
        columns: [
          {
            name: 'Address', cell: function(row){ return row.BalanceUpdate.Address}, rendering: renderAddressLink,
          },
          {
            name: 'Balance', cell: function(row){ return parseFloat(row.balance).toFixed(3)},
          },
          {
            name: 'Unique Ids Owned Lifetime', cell: function(row){ return row.ids},
          },
        ]
      }
    }
  }
  class TopNFTHoldersPie extends PieChartComponent {
    configuration() {
      return {
        topElement: function(response) { return response.EVM.BalanceUpdates },
        chainId: function (response){return response.EVM.BalanceUpdates[0].ChainId},
        columns: [
          {name: 'Address', cell: function(row){ return  row.BalanceUpdate.Address}},
          {name: 'Count', cell: function(row){ return +row.balance} }
        ],
        options: {
          title: 'Balance',
          height: 395
        }
      }
    }
  }
  class SubscriptionLatestTradesNFTToken extends BootstrapTableComponent {
    configuration() {
      return  {
         topElement: function (response){ return response.EVM.DEXTrades},
          chainId: function (response){ return response.EVM.DEXTrades[0].ChainId},
          columns: [
          {
          name: 'Time', cell: function(row){ return row.Block.Time},  rendering: renderDate,
          },
          {
          name: 'NFT', cell: function(row){ return {currency: row.Trade.Buy.Currency.Symbol, smartContract: row.Trade.Buy.Currency.SmartContract}}, rendering: renderTokenLink,
          },
          {
          name: 'Sell currency',  cell: function(row){ return {currency: row.Trade.Sell.Currency.Symbol, smartContract: row.Trade.Sell.Currency.SmartContract}}, rendering: renderTokenLink,
          },
          {
          name: 'Seller', cell: function(row){ return row.Trade.Buy.Seller}, rendering: renderAddressLink,
          },
          {
          name: '', cell: function(row) { return '' }, rendering: renderSenderRecieverIcon
          },
          {
          name: 'Buyer', cell: function(row){ return row.Trade.Buy.Buyer},   rendering: renderAddressLink,
          },
          {
          name: 'Price', cell: function(row){ return parseFloat(row.Trade.Buy.Price).toFixed(3) },
          },
          {
          name: 'Dex',cell: function(row){ return {ProtocolFamily: row.Trade.Dex.ProtocolFamily, ProtocolName: row.Trade.Dex.ProtocolName, ProtocolVersion:row.Trade.Dex.ProtocolVersion }}, rendering: renderDexProtocolLink,
          },
          {
          name: 'Transaction', cell: function(row){ return row.Transaction.Hash},  rendering: renderTX,
          },
          ]
      }
    }
  }

  const variables = {
    network:'<%= @streaming%>',
    limit: 10,
    offset: 0,
    address: '<%= @address %>',
    token: '<%= @address %>',
    id: '<%= @id %>',
  }

  renderWithTime(variables,<%= limited_date_range_limit(@from, @till).join(',').html_safe %>, function f(variables){
    renderComponent(NFTTokenInformation, "#NFT-token-information",'NFT-token-information_1_1_1',variables);
    renderComponent(PopularTokenIDsNFT, "#Popular-Token-IDs",'Popular-Token-IDs-for-NFT-Based-on-Transfer-Count_1',variables);
    renderComponent(TopNFTHolders, "#Top-NFT-Holders",'Top-NFT-Holders_1',variables);
    renderComponent(TopNFTHoldersPie, "#Top-NFT-Holders-Pie",'Top-NFT-Holders_1',variables);
    renderComponent(SubscriptionLatestTradesNFTToken, "#Subscription-for-the-Latest-Trades-of-NFT-Token",'Subscription-for-the-Latest-Trades-of-NFT-Token_1_1_1_1_1',variables, "Latest-Trades-of-NFT-Token_1_1_1");
  })
</script>
