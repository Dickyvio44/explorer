<% if @native_token %>
  if if if
<% else %>
  <div class="row mb-4">
    <div class="col-12 col-lg-6">
      <div class="card" id="TokenAttributes"></div>
    </div>
    <div class="col-12 col-lg-6">
      <div class="card" id="AddressBalanceByCurrencies" ></div>
    </div>
  </div>
  <script >
    class TokenAttributes extends BootstrapVerticalTableComponent {
      configuration() {
        return  {
        topElement: function (response){ return response.EVM.DEXTrades},
        chainId: function (response){ return response.EVM.DEXTrades[0].ChainId},
          columns: [
            {
              name: 'Symbol', cell: function(row){ return row.Trade.Buy.Currency.Symbol},
            },
            {
              name: 'Name', cell: function(row){ return row.Trade.Buy.Currency.Name},
            },
            {
              name: 'Number of Decimals', cell: function(row){ return row.Trade.Buy.Currency.Decimals},
            },
            {
              name: 'Protocol name', cell: function(row){ return row.Trade.Buy.Currency.ProtocolName},
            },
          ]
        }
      }
    }
    class AddressBalanceByCurrencies extends BootstrapVerticalTableComponent {
      configuration() {
          return  {
            topElement: function (response){ return response.EVM.DEXTrades},
            chainId: function (response){ return response.EVM.DEXTrades[0].ChainId},
              columns: [
                {
                  name: 'Transfer Count', cell: function(row){ return row.count},
                },
                {
                  name: 'Uniq Senders', cell: function(row){ return row.sender_count},
                },
                {
                  name: 'Uniq Receivers', cell: function(row){ return row.receiver_count},
                },
                {
                  name: 'First transfer date', cell: function(row){ return row.Block.min_date},
                },
                {
                  name: 'Last transfer date', cell: function(row){ return row.Block.max_date},
                },
                {
                  name: 'Days token transfered', cell: function(row){ return row.days},
                },

              ],
              options: {
                  columnTitle1: 'Metric',
                  columnTitle2: 'Value',
              },
          }
      }
    }
     const variables = {
      network:'<%= @streaming%>',
      offset: 0,
      address: '<%= @address %>',
      token: '<%= @address %>',
      id: '<%= @id %>',
    //      network:'eth',
    // address: '0xcf523864704a502d36e8e24cd73a2aee6cda00e1',
    //0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9 (arbitrum token)

    }

      renderComponent(TokenAttributes, "#TokenAttributes",'Token-attributes_1_1_1_1',variables);
      renderComponent(AddressBalanceByCurrencies, "#AddressBalanceByCurrencies",'Token-transfer-statistics_1_1',variables);
  </script>
<% end  %>
