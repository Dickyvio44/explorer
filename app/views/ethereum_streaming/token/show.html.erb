<% if @native_token %>
  if if if
<% else %>
  <div class="row d-flex">
    <div class='col-12 col-lg-6'>
      <div class='card' id='TokenAttributes'></div>
    </div>
    <div class='col-12 col-lg-6'>
      <div class='card' id='AddressBalanceByCurrencies'></div>
    </div>
    <div class='col-12 col-lg-6'>
      <div class='card' id='TokenHolderOfToken'></div>
    </div>
  </div>
  <script>
      class TokenAttributes extends BootstrapVerticalTableComponent {
          configuration() {
              return {
                  topElement: function (response) {
                      return response.EVM.Transfers
                  },
                  chainId: function (response) {
                      return response.EVM.Transfers[0].ChainId
                  },
                  columns: [
                      {
                          name: 'Symbol', cell: function (row) {
                              return row.Transfer.Currency.Symbol
                          },
                      },
                      {
                          name: 'Name', cell: function (row) {
                              return row.Transfer.Currency.Name
                          },
                      },
                      // {
                      //     name: 'ID', cell: function (row) {
                      //         return {id: row.Transfer.Id, address: row.Transfer.Currency.SmartContract}
                      //     }, rendering: renderIdLink
                      // },
                      {
                          name: 'Number of Decimals', cell: function (row) {
                              return row.Transfer.Currency.Decimals
                          },
                      },
                      {
                          name: "Balance", cell: function (row) {
                              return row.sum
                          }
                      },
                      {
                          name: 'Protocol name', cell: function (row) {
                              return row.Transfer.Currency.ProtocolName
                          },
                      },
                  ]
              }
          }
      }

      class AddressBalanceByCurrencies extends BootstrapVerticalTableComponent {
          configuration() {
              return {
                  topElement: function (response) {
                      return response.EVM.Transfers
                  },
                  chainId: function (response) {
                      return response.EVM.Transfers[0].ChainId
                  },
                  columns: [
                      {
                          name: 'Transfer Count', cell: function (row) {
                              return row.count
                          },
                      },
                      {
                          name: 'Uniq Senders', cell: function (row) {
                              return row.sender_count
                          },
                      },
                      {
                          name: 'Uniq Receivers', cell: function (row) {
                              return row.receiver_count
                          },
                      },
                      {
                          name: 'First transfer date', cell: function (row) {
                              return row.Block.min_date
                          },
                      },
                      {
                          name: 'Last transfer date', cell: function (row) {
                              return row.Block.max_date
                          },
                      },
                      {
                          name: 'Days token transferred', cell: function (row) {
                              return row.days
                          },
                      },

                  ],
                  options: {
                      columnTitle1: 'Metric',
                      columnTitle2: 'Value',
                  },
              }
          }
      }

      class TokenHolderOfToken extends BootstrapTableComponent {
          configuration() {
              return {
                  topElement: function (response) {
                      return response.EVM.BalanceUpdates
                  },
                  chainId: function (response) {
                      return response.EVM.BalanceUpdates[0].ChainId
                  },
                  columns: [
                      {
                          name: 'Holder', cell: function (row) {
                              return row.BalanceUpdate.Address
                          }, rendering: renderJustAddressLink,
                      },
                      {
                          name: 'Balance of the token', cell: function (row) {
                              return row.Balance
                          }, rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                      },
                  ]
              }
          }
      }

      const variables = {
          network: '<%= @streaming%>',
          address: '<%= @address %>',
      }

      renderComponent(TokenAttributes, '#TokenAttributes', 'Token-attributes_4', variables);
      renderComponent(AddressBalanceByCurrencies, '#AddressBalanceByCurrencies', 'Token-transfer-statistics_2', variables);
      renderComponent(TokenHolderOfToken, '#TokenHolderOfToken', 'Token-holder-of-token_1', variables);
  </script>
<% end %>
