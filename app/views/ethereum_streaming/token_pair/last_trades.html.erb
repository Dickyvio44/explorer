<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='PairLastTrades' class='card'></div>
  </div>
</div><div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='SubscriptionPairLastTrades' class='card'></div>
  </div>
</div>
<script>
    class PairLastTrades extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                title: "Pair last trades",
                columns: [
                    {
                        name: 'Timestamp', cell: function (row) {
                            return row.Block.Time
                        }, rendering: renderDate,
                    },                    {
                        name: 'Block', cell: function (row) {
                            return row.Block.Number
                        }, rendering: renderBlockLink,
                    },
                    {
                        name: 'Quote amount', cell: function (row) {
                            return row.Trade.Buy.Amount
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Quote currency', cell: function (row) {
                            return {
                                currency: row.Trade.Buy.Currency.Symbol,
                                smartContract: row.Trade.Buy.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink, headerStyle: {width: '15%'},
                    },
                    {
                        name: 'Price', cell: function (row) {
                            return row.Trade.Buy.Price
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Base amount', cell: function (row) {
                            return row.Trade.Sell.Amount
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Base currency', cell: function (row) {
                            return {
                                currency: row.Trade.Sell.Currency.Symbol,
                                smartContract: row.Trade.Sell.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink, headerStyle: {width: '15%'},
                    },
                    {
                        name: 'Protocol', cell: function (row) {
                            return {
                                ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                                ProtocolName: row.Trade.Dex.ProtocolName,
                                ProtocolVersion: row.Trade.Dex.ProtocolVersion
                            }
                        }, rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'Smart Contract', cell: function (row) {
                            return row.Trade.Dex.SmartContract
                        }, rendering: renderJustAddressLink,
                    },
                ]
            }
        }
    }
    class SubscriptionPairLastTrades extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                title: "Subscription Pair last trades",
                columns: [
                    {
                        name: 'Timestamp', cell: function (row) {
                            return row.Block.Time
                        }, rendering: renderDate,
                    },                    {
                        name: 'Block', cell: function (row) {
                            return row.Block.Number
                        }, rendering: renderBlockLink,
                    },
                    {
                        name: 'Quote amount', cell: function (row) {
                            return row.Trade.Buy.Amount
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Quote currency', cell: function (row) {
                            return {
                                currency: row.Trade.Buy.Currency.Symbol,
                                smartContract: row.Trade.Buy.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink, headerStyle: {width: '15%'},
                    },
                    {
                        name: 'Price', cell: function (row) {
                            return row.Trade.Buy.Price
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Base amount', cell: function (row) {
                            return row.Trade.Sell.Amount
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Base currency', cell: function (row) {
                            return {
                                currency: row.Trade.Sell.Currency.Symbol,
                                smartContract: row.Trade.Sell.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink, headerStyle: {width: '15%'},
                    },
                    {
                        name: 'Protocol', cell: function (row) {
                            return {
                                ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                                ProtocolName: row.Trade.Dex.ProtocolName,
                                ProtocolVersion: row.Trade.Dex.ProtocolVersion
                            }
                        }, rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'Smart Contract', cell: function (row) {
                            return row.Trade.Dex.SmartContract
                        }, rendering: renderJustAddressLink,
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        baseCurrency: '<%= @token1 %>',
        quoteCurrency: '<%= @token2 %>',
    }
    renderWithTime(variables, <%= limited_date_range_limit(@from, @till).join(',').html_safe %>, function f(variables) {
        renderComponent([[PairLastTrades, '#PairLastTrades']], 'Pair-last-trades_4', variables);
    })
    renderComponent([[SubscriptionPairLastTrades, '#SubscriptionPairLastTrades']], null, variables, 'Subscription-pair-last-trades_2');

</script>