<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div  id="NFT-Transfers-By-Date" class="card"></div>
  </div>
</div>
<div class="row mb-4">
  <div class="col-12 col-lg-7">
    <div class="card" id="Top-transfered-NFT"></div>
  </div>
  <div class="col-12 col-lg-5">
    <div class="card" id="NFT-Transfers-By-Date-Pie"></div>
  </div>
</div>
<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div  id="NFT-Token-Trades-By-Date" class="card"></div>
  </div>
</div>
<div class="row mb-4">
  <div class="col-12 col-lg-7">
    <div class="card" id="Top-traded-NFT-tokens"></div>
  </div>
  <div class="col-12 col-lg-5">
    <div class="card" id="Top-traded-NFT-tokens-Pie"></div>
  </div>
</div>
<div class="row mb-4">
  <div class="col-12 col-lg-7">
    <div class="card"id="Top-exchange-protocols-trading-NFT"></div>
  </div>
  <div class="col-12 col-lg-5">
    <div class="card"id="Top-exchange-protocols-trading-NFT-Pie" ></div>
  </div>
</div>
<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div  id="Subscription-Latest-Trades-NFT-Token"class="card "></div>
  </div>
</div>
<script >
  class NFTTransfersByDate extends TimeChartComponent {
    configuration() {
      return {
        topElement: function(response) { return response.EVM.Transfers },
        chainId: function (response){ return response.EVM.Transfers[0].ChainId},
        columns: [
          {name: 'Date', cell: function (row) { return row.Block.Date } },
          {name: 'Count', cell: function (row) { return +row.count } }
        ],
        options: {
            title: 'Transfers Count',
            height: 300
        }
      }
    }
  }
  class TopTransferedNFT extends BootstrapTableComponent {
      configuration() {
        return  {
          topElement: function (response){ return response.EVM.Transfers},
          chainId: function (response){ return response.EVM.Transfers[0].ChainId},
          columns: [
            {
              name: 'NFT', cell: function(row){ return {currency: row.Transfer.Currency.Symbol, smartContract: row.Transfer.Currency.SmartContract}}, rendering: renderTokenLink,
            },
            {
              name: 'Transfers', cell: function(row){ return row.count},
            },
            {
              name: 'Unique Senders', cell: function(row){ return row.senders},
            },
            {
              name: '', cell: function(row) { return '' }, rendering: renderSenderRecieverIcon
            },

            {
              name: 'Unique Receivers', cell: function(row){ return row.receivers},
            },
          ]
        }
      }
  }
  class NFTTransfersByDatePie extends PieChartComponent {
    configuration() {
      return {
        topElement: function(response) { return response.EVM.Transfers },
        chainId: function (response){ return response.EVM.Transfers[0].ChainId},
        columns: [
          {name: 'NFT', cell: function(row){ return  row.Transfer.Currency.Symbol}},
          {name: 'Count', cell: function(row){ return +row.count} }
        ],
        options: {
          title: 'Transfers Count',
          height: 395
        }
      }
    }
  }
  class NFTTokenTradesByDate extends TimeChartComponent {
    configuration() {
      return  {
        topElement: function (response){ return response.EVM.DEXTrades },
        chainId: function (response){ return response.EVM.DEXTrades[0].ChainId},
        columns: [
          { name: 'Date', cell: function(row) { return row.Block.Date } },
          { name: function(row) { return `${row.Trade.Dex.ProtocolFamily} ${row.Trade.Dex.ProtocolVersion}` }, cell: function(row) { return +row.count } } ,
        ],
        options: {
          isStacked: true,
          theme: 'material'
        }
      }
    }
  }
  class TopTradedNFTTokens extends BootstrapTableComponent {
      configuration() {
        return  {
          topElement: function (response){ return response.EVM.DEXTrades},
          chainId: function (response){ return response.EVM.DEXTrades[0].ChainId},
          columns: [
            {
              name: 'NFT', cell: function(row){ return {currency: row.Trade.Buy.Currency.Symbol, smartContract: row.Trade.Buy.Currency.SmartContract}}, rendering: renderTokenLink,
            },
            {
              name: 'Trades', cell: function(row){ return row.count},
            },
            {
              name: 'Paid Amount', cell: function(row){ return parseFloat(row.sell_amount).toFixed(3)},
            },
            {
              name: 'Currency', cell: function(row){ return {currency: row.Trade.Sell.Currency.Symbol, smartContract: row.Trade.Sell.Currency.SmartContract}}, rendering: renderAddressLink,
            },
            {
              name: 'Min Price', cell: function(row){ return parseFloat(row.Trade.Buy.min_price).toFixed(3)},
            },
            {
              name: 'Max Price', cell: function(row){ return parseFloat(row.Trade.Buy.max_rice).toFixed(3)},
            },
          ]
        }
    }
  }
  class TopTradedNFTTokensPie extends PieChartComponent {
    configuration() {
      return {
        topElement: function(response) { return response.EVM.DEXTrades},
        chainId: function (response){ return response.EVM.DEXTrades[0].ChainId},
        columns: [
          {name: 'NFT', cell: function(row){ return  row.Trade.Buy.Currency.Symbol}},
          {name: 'Count', cell: function(row){ return +row.count} }
        ],
        options: {
            title: 'Trades Count',
          height: 395
        }
      }
    }
  }
  class TopExchangesForNFTs extends BootstrapTableComponent {
      configuration() {
        return  {
          topElement: function (response){ return response.EVM.DEXTrades},
          chainId: function (response){ return response.EVM.DEXTrades[0].ChainId},
          columns: [
            {
              name: 'Protocol', cell: function(row){ return {ProtocolFamily: row.Trade.Dex.ProtocolFamily, ProtocolName: row.Trade.Dex.ProtocolName, ProtocolVersion:row.Trade.Dex.ProtocolVersion }}, rendering: renderDexProtocolLink,
            },
            {
              name: 'Trades', cell: function(row){ return row.count},
            },
            {
              name: 'Unique NFTs traded', cell: function(row){ return row.nfts},
            },
            {
              name: 'Unique Currencies Paid', cell: function(row){ return row.currencies},
            },
            {
              name: 'Unique NFT Buyers', cell: function(row){ return row.buyers},
            },
          ]
        }
      }
  }
  class TopExchangesForNFTsPie extends PieChartComponent {
    configuration() {
      return {
        topElement: function(response) { return response.EVM.DEXTrades },
        chainId: function (response){ return response.EVM.DEXTrades[0].ChainId},
        columns: [
          {name: 'Protocol', cell: function(row){ return  `${row.Trade.Dex.ProtocolName} ${row.Trade.Dex.ProtocolVersion}`}},
          {name: 'Count', cell: function(row){ return +row.count} }
        ],
        options: {
            title: 'Trades Count',
            height: 395
          }
      }
    }
  }
  class SubscriptionLatestTradesNFTToken extends BootstrapTableComponent {
      configuration() {
        return  {
          topElement: function (response){ return response.EVM.DEXTrades},
          chainId: function (response){ return response.EVM.DEXTrades[0].ChainId},
          columns: [
            {
              name: 'Time', cell: function(row){ return row.Block.Time},  rendering: renderDate,
            },
            {
              name: 'Sell currency',  cell: function(row){ return {currency: row.Trade.Sell.Currency.Symbol, smartContract: row.Trade.Sell.Currency.SmartContract}}, rendering: renderTokenLink,
            },
            {
              name: 'Seller', cell: function(row){ return row.Trade.Buy.Seller}, rendering: renderAddressLink,
            },
            {
              name: '', cell: function(row) { return '' }, rendering: renderSenderRecieverIcon
            },
            {
              name: 'Buyer', cell: function(row){ return row.Trade.Buy.Buyer},   rendering: renderAddressLink,
            },
            {
              name: 'NFT', cell: function(row){ return {currency: row.Trade.Buy.Currency.Symbol, smartContract: row.Trade.Buy.Currency.SmartContract}}, rendering: renderTokenLink,
            },
            {
              name: 'ID', cell: function(row){ return {id:row.Trade.Buy.Ids[0],address: row.Trade.Buy.Currency.SmartContract }}, rendering: renderIdLink
              //cell: function(row){ return row.Trade.Buy.Ids},
            },
            {
              name: 'Buy amount', cell: function(row){return parseFloat(row.Trade.Buy.Amount).toFixed(2)}
            },
            {
              name: 'Price', cell: function(row){ return parseFloat(row.Trade.Buy.Price).toFixed(3) },
            },
            {
              name: 'Dex',cell: function(row){ return {ProtocolFamily: row.Trade.Dex.ProtocolFamily, ProtocolName: row.Trade.Dex.ProtocolName, ProtocolVersion:row.Trade.Dex.ProtocolVersion }}, rendering: renderDexProtocolLink,
            },
            {
              name: 'Transaction', cell: function(row){ return row.Transaction.Hash},  rendering: renderTX,
            },
          ]
        }
      }
  }


  const variables = {
    network:'<%= @streaming%>',
    offset: 0,
    address: '<%= @address %>',
    token: '<%= @address %>',
    id: '<%= @id %>',
  }
  renderWithTime(variables,<%= limited_date_range_limit(@from, @till).join(',').html_safe %>, function f(variables){
    renderComponent(NFTTransfersByDate, "#NFT-Transfers-By-Date",'NFT-Token-Transfers-By-Date_1',variables);//Graph Barchart
    renderComponent(NFTTransfersByDatePie, "#NFT-Transfers-By-Date-Pie",'Copy-of-Top-transfered-NFT-tokens-in-network',variables);//Graph Barchart
    renderComponent(TopTransferedNFT, "#Top-transfered-NFT",'Top-transfered-NFT-tokens-in-network_1',variables);
    renderComponent(NFTTokenTradesByDate, "#NFT-Token-Trades-By-Date",'NFT-Token-Trades-By-Date_1_1',variables);//Graph Barchart
    renderComponent(TopTradedNFTTokens, "#Top-traded-NFT-tokens",'Top-traded-NFT-tokens-in-network_1',variables);
    renderComponent(TopTradedNFTTokensPie, "#Top-traded-NFT-tokens-Pie",'Top-traded-NFT-tokens-in-network_1',variables);
    renderComponent(TopExchangesForNFTs, "#Top-exchange-protocols-trading-NFT",'Top-exchange-protocols-trading-NFT-tokens-in-network_1',variables);
    renderComponent(TopExchangesForNFTsPie, "#Top-exchange-protocols-trading-NFT-Pie",'Top-exchange-protocols-trading-NFT-tokens-in-network_1',variables);
    renderComponent(SubscriptionLatestTradesNFTToken, "#Subscription-Latest-Trades-NFT-Token",'Latest-Trades-of-NFT-Tokens-in-Network_1_1_1_1_1_1_1_1',variables);
  })
</script>
