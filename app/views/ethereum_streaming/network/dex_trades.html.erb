<div class='row mb-4'>
  <div class='col-12 col-lg-6'>
    <div class='card' id='TradesByTimeTrades'></div>
  </div>
  <div class='col-12 col-lg-6'>
    <div class='card' id='TradesByTimeAddress'></div>
  </div>
</div>
<div class='row mb-4'>
  <div class='col-12 col-lg-6'>
    <div class='card' id='TradesByTimeCurrencies'></div>
  </div>
  <div class='col-12 col-lg-6'>
    <div class='card' id='TradesByTimeContracts'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='TokenTradesTable' class='card'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='SubTokenTradesTable' class='card'></div>
  </div>
</div>
<script>
    class TradesByTimeTrades extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.Block.Date
                        }
                    },
                    {
                        name: 'Trades', cell: function (row) {
                            return +row.trades
                        }
                    }
                ],
                options: {
                    title: 'Trades by time',
                    height: 300,
                    colors: ['FFC106'],
                }
            }
        }
    }

    class TradesByTimeAddress extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.Block.Date
                        }
                    },
                    {
                        name: 'Trades addresses', cell: function (row) {
                            return +row.traders
                        }
                    }
                ],
                options: {
                    title: 'Trade Takers',
                    height: 300,
                    colors: ['28A745'],
                }
            }
        }
    }

    class TradesByTimeCurrencies extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.Block.Date
                        }
                    },
                    {
                        name: 'Currencies', cell: function (row) {
                            return +row.contracts
                        }
                    }
                ],
                options: {
                    title: 'Traded currencies by time',
                    height: 300,
                    colors: ['28A745'],
                }
            }
        }
    }

    class TradesByTimeContracts extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.Block.Date
                        }
                    },
                    {
                        name: 'Uniq Contracts', cell: function (row) {
                            return +row.currencies
                        }
                    }
                ],
                options: {
                    title: 'DEX Smart Contracts by time',
                    height: 300,
                    colors: ['FFC106'],
                }
            }
        }
    }

    class TokenTradesTable extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                columns: [
                    {
                        name: 'Timestamp', cell: function (row) {
                            return row.Block.Time
                        }, rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: function (row) {
                            return row.Block.Number
                        }, rendering: renderBlockLink,
                    },
                    {
                        name: 'Sell amount', cell: function (row) {
                            return row.Trade.Sell.Amount
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Sell currency', cell: function (row) {
                            return {
                                currency: row.Trade.Sell.Currency.Symbol,
                                smartContract: row.Trade.Sell.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink,
                    },
                    {
                        name: '', cell: function (row) {
                            return ''
                        }, rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Buy amount', cell: function (row) {
                            return row.Trade.Buy.Amount
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Buy currency', cell: function (row) {
                            return {
                                currency: row.Trade.Buy.Currency.Symbol,
                                smartContract: row.Trade.Buy.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink,
                    },
                    {
                        name: 'Protocol', cell: function (row) {
                            return {
                                ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                                ProtocolName: row.Trade.Dex.ProtocolName,
                                ProtocolVersion: row.Trade.Dex.ProtocolVersion
                            }
                        }, rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'Smart Contract', cell: function (row) {
                            return {currency: null, smartContract: row.Trade.Dex.SmartContract}
                        }, rendering: renderTokenLink,
                    },
                    {
                        name: 'Hash', cell: function (row) {
                            return row.Transaction.Hash
                        }, rendering: renderTX,
                    },
                ]
            }
        }
    }

    class SubTokenTradesTable extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                columns: [
                    {
                        name: 'Timestamp', cell: function (row) {
                            return row.Block.Time
                        }, rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: function (row) {
                            return row.Block.Number
                        }, rendering: renderBlockLink,
                    },
                    {
                        name: 'Sell amount', cell: function (row) {
                            return row.Trade.Sell.Amount
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Sell currency', cell: function (row) {
                            return {
                                currency: row.Trade.Sell.Currency.Symbol,
                                smartContract: row.Trade.Sell.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink,
                    },
                    {
                        name: '', cell: function (row) {
                            return ''
                        }, rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Buy amount', cell: function (row) {
                            return row.Trade.Buy.Amount
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Buy currency', cell: function (row) {
                            return {
                                currency: row.Trade.Buy.Currency.Symbol,
                                smartContract: row.Trade.Buy.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink,
                    },
                    {
                        name: 'Protocol', cell: function (row) {
                            return {
                                ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                                ProtocolName: row.Trade.Dex.ProtocolName,
                                ProtocolVersion: row.Trade.Dex.ProtocolVersion
                            }
                        }, rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'Smart Contract', cell: function (row) {
                            return {currency: null, smartContract: row.Trade.Dex.SmartContract}
                        }, rendering: renderTokenLink,
                    },
                    {
                        name: 'Hash', cell: function (row) {
                            return row.Transaction.Hash
                        }, rendering: renderTX,
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming %>',
        offset: 0,
        till: new Date().toISOString().slice(0, 10),
        from: (new Date((new Date()).setDate((new Date()).getDate() - 7))).toISOString().slice(0, 10),
    };

    renderWithTime(variables, <%= limited_date_range_limit(@from, @till).join(',').html_safe %>, function f(variables) {
        renderComponent(TradesByTimeTrades, '#TradesByTimeTrades', 'Trades-By-Time', variables);
        renderComponent(TradesByTimeAddress, '#TradesByTimeAddress', 'Trades-By-Time', variables);
        renderComponent(TradesByTimeCurrencies, '#TradesByTimeCurrencies', 'Trades-By-Time', variables);
        renderComponent(TradesByTimeContracts, '#TradesByTimeContracts', 'Trades-By-Time', variables);
    });
    renderComponent(TokenTradesTable, '#TokenTradesTable', 'Token-Trades_1_1', variables);
    renderComponent(SubTokenTradesTable, '#SubTokenTradesTable', 'Token-Trades_1_1', variables, 'Subscription-Token-Trades_1_1');
</script>
