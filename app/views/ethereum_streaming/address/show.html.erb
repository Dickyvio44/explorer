<div class="row mb-4">
  <div class="col-12 col-lg-6">
    <div class="card" id="TotalAddressStatistics"></div>
  </div>
  <div class="col-12 col-lg-6">
    <div class="card" id="TotalAddressStatisticsSender" ></div>
  </div>
</div>
<div class="row mb-4">
  <div class="col-12 col-lg-6">
    <div class="card" id="TransactionsByDate"></div>
  </div>
  <div class="col-12 col-lg-6">
    <div class="card" id="AddressBalanceByCurrencies" ></div>
  </div>
</div>
<script >
  class TotalAddressStatistics extends BootstrapVerticalTableComponent {
    configuration() {
      return  {
        topElement: function (response){ return response.EVM},
        chainId: function (response){  return response.EVM.receiver[0].ChainId },
        columns: [
          {
            name: 'Fee TX count', cell: function(row){ return row.fee[0].tx_count},
          },
          {
            name: 'TX fee', cell: function(row){ return row.fee[0].tx_fee},
          },
          {
            name: 'Receive from', cell: function(row){ return row.receiver[0].count},
          },
          {
            name: 'Receive  currencies', cell: function(row){ return row.receiver[0].currencies},
          },
          {
            name: 'Send to', cell: function(row){ return row.sender[0].count},
          },
          {
            name: 'Send  currencies', cell: function(row){ return row.sender[0].currencies},
          },
          {
            name: 'Receive amount', cell: function(row){ return row.receiver[0].amount},
          },
          {
            name: 'Send amount', cell: function(row){ return row.sender[0].amount},
          },
          {
            name: 'First Tx at', cell: function(row){ return row.receiver[0].Block.from}, rendering: renderDate,
          },
          {
            name: 'Last Tx at', cell: function(row){ return row.receiver[0].Block.to}, rendering: renderDate,
          },
          {
            name: 'Days with receive', cell: function(row){ return row.row.receiver[0].days},
          },
        ]
      }
    }
  }

  // class NFTTransfersByDate extends TimeChartComponent {
  //   configuration() {
  //     return {
  //       topElement: function(response) { return response.EVM.Transfers },
  //       chainId: function (response){ return response.EVM.Transfers[0]?.ChainId},
  //       columns: [
  //         {name: 'Date', cell: function (row) { return row.Block.Date } },
  //         {name: 'Transactions count', cell: function (row) { return +row.count } }
  //       ],
  //       options: {
  //           height: 300,
  //           colors:['28A745']
  //       }
  //     }
  //   }
  // }
  class TransactionsByDate extends BootstrapTableComponent {
    configuration() {
        return  {
            topElement: function (response){ return response.EVM.BalanceUpdates},
            chainId: function (response){ return response.EVM.BalanceUpdates[0].ChainId},
            columns: [
                {
                name: 'Currency',  cell: function(row){ return {currency: row.Currency.Symbol, smartContract: row.Currency.SmartContract}}, rendering: renderTokenLink,
                },
                {
                name: 'Balance Count', cell: function(row){ return row.sum}, rendering: renderNumbers,
                },
            ]
        }
    }
  }


  const variables = {
    network:'<%= @streaming%>',
    offset: 0,
    address: '<%= @address %>',
    token: '<%= @address %>',
    id: '<%= @id %>',
  }
    renderComponent(TotalAddressStatistics, "#TotalAddressStatistics",'Total-Address-Statistics_1_1_1_1_1_1_1',variables);
  renderWithTime(variables,<%= limited_date_range_limit(@from, @till).join(',').html_safe %>, function f(variables){
    // renderComponent(AddressBalanceByCurrencies, "#AddressBalanceByCurrencies",'Transactions-By-Date_1_1_1_1',variables);
    renderComponent(TransactionsByDate, "#TransactionsByDate",'Address-balance-by-currencies_1',variables);
  })
</script>
