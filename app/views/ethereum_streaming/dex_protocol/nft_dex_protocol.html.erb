<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div id="DEX-Protocol-NFT-Token-Trades-By-Date" class="card"></div>
  </div>
</div>
<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div  id="Live-Trades-of-NFT-Token-on-DEX-Protocol_1" class="card"></div>
  </div>
</div>
<script >
  class DEXProtocolNFTTokenTradesByDate extends TimeChartComponent {
    configuration() {
      return  {
        topElement: function (response){ return response.EVM.DEXTrades},
        chainId: function (response){ return response.EVM.DEXTrades[0].ChainId},
        columns: [
          {name: 'Date', cell: function (row) { return row.Block.Date } },
          {name: 'Count', cell: function (row) { return +row.count } }
        ],
        options: {
          title: 'Trades By Date',
          height: 300
        }
      }
    }
  }
  class LiveTradesNFTTokenDEXProtocol extends BootstrapTableComponent {
    configuration() {
      return  {
        topElement: function (response){ return response.EVM.DEXTrades},
        chainId: function (response){ return response.EVM.DEXTrades[0].ChainId},
        columns: [
          {
            name: 'Time', cell: function(row){ return row.Block.Time},  rendering: renderDate,
          },
          {
            name: 'ID', cell: function(row){ return {id: row.Trade.Buy.Ids, address: row.Trade.Buy.Currency.SmartContract}}, rendering: renderIdLink
          },
          {
            name: 'Price', cell: function(row){ return parseFloat(row.Trade.Buy.Price).toFixed(3)},
          },
          {
            name: 'Currency',  cell: function(row){ return {currency: row.Trade.Sell.Currency.Symbol, smartContract: row.Trade.Buy.Currency.SmartContract}}, rendering: renderTokenLink,
          },
          {
            name: 'Seller', cell: function(row){ return row.Trade.Buy.Seller},  rendering: renderAddressLink,
          },
          {
            name: '', cell: function(row) { return '' }, rendering: renderSenderRecieverIcon
          },
          {
            name: 'Buyer', cell: function(row){ return row.Trade.Buy.Buyer},  rendering: renderAddressLink,
          },
          {
            name: 'Dex',cell: function(row){ return {ProtocolFamily: row.Trade.Dex.ProtocolFamily, ProtocolName: row.Trade.Dex.ProtocolName, ProtocolVersion:row.Trade.Dex.ProtocolVersion }}, rendering: renderDexProtocolLink,
          },
          {
            name: 'Transaction', cell: function(row){ return row.Transaction.Hash},  rendering: renderTX,
          },
        ]
      }
    }
  }

  const variables = {
    network:'<%= @streaming%>',
    limit: 10,
    offset: 0,
    address: '<%= @address %>',
    token: '<%= @address %>',
    id: '<%= @id %>',
  }

    renderWithTime(variables,<%= limited_date_range_limit(@from, @till).join(',').html_safe %>, function f(variables){
      renderComponent(DEXProtocolNFTTokenTradesByDate, "#DEX-Protocol-NFT-Token-Trades-By-Date",'DEX-Protocol-NFT-Token-Trades-By-Date_1',variables);
      renderComponent(LiveTradesNFTTokenDEXProtocol, "#Live-Trades-of-NFT-Token-on-DEX-Protocol_1",'Live-Trades-of-NFT-on-DEX-Protocol_1',variables, 'Latest-Trades-of-NFT-Token-on-DEX-Protocol_1_1_1_1_1');
    })
</script>
