<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='NFTTransfersByDate' class='card'></div>
  </div>
</div>
<div class='row mb-4'>
  <div class='col-12 col-lg-7'>
    <div class='card' id='TopTransferNFT'></div>
  </div>
  <div class='col-12 col-lg-5'>
    <div class='card' id='NFTTransfersByDatePie'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='NFTTokenTradesByDate' class='card'></div>
  </div>
</div>
<div class='row mb-4'>
  <div class='col-12 col-lg-7'>
    <div class='card' id='TopTradedNFTTokens'></div>
  </div>
  <div class='col-12 col-lg-5'>
    <div class='card' id='TopTradedNFTTokensPie'></div>
  </div>
</div>
<div class='row mb-4'>
  <div class='col-12 col-lg-7'>
    <div class='card' id='TopExchangesForNFTs'></div>
  </div>
  <div class='col-12 col-lg-5'>
    <div class='card' id='TopExchangesForNFTsPie'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='SubscriptionLatestTradesNFTToken' class='card '></div>
  </div>
</div>
<script>
    class NFTTransfersByDate extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.Transfers
                },
                chainId: function (response) {
                    return response.EVM.Transfers[0]?.ChainId
                },
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.Block.Date
                        }
                    },
                    {
                        name: 'Count', cell: function (row) {
                            return +row.count
                        }
                    }
                ],
                options: {
                    title: 'Transfers Count',
                    height: 300
                }
            }
        }
    }

    class TopTransferNFT extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.Transfers
                },
                chainId: function (response) {
                    return response.EVM.Transfers[0]?.ChainId
                },
                columns: [
                    {
                        name: 'NFT', cell: function (row) {
                            return {
                                currency: row.Transfer.Currency.Symbol,
                                smartContract: row.Transfer.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink, headerStyle: {width: '30%'},
                    },
                    {
                        name: 'Transfers', cell: function (row) {
                            return row.count
                        },
                    },
                    {
                        name: 'Unique Senders', cell: function (row) {
                            return row.senders
                        },
                    },
                    {
                        name: '', cell: function () {
                            return ''
                        }, rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'}
                    },
                    {
                        name: 'Unique Receivers', cell: function (row) {
                            return row.receivers
                        },
                    },
                ]
            }
        }
    }

    class NFTTransfersByDatePie extends PieChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.Transfers
                },
                chainId: function (response) {
                    return response.EVM.Transfers[0]?.ChainId
                },
                columns: [
                    {
                        name: 'NFT', cell: function (row) {
                            return row.Transfer.Currency.Symbol
                        }
                    },
                    {
                        name: 'Count', cell: function (row) {
                            return +row.count
                        }
                    }
                ],
                options: {
                    title: 'Transfers Count',
                    height: 395,

                }
            }
        }
    }

    class NFTTokenTradesByDate extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0]?.ChainId
                },
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.Block.Date
                        }
                    },
                    {
                        name: function (row) {
                            return `${row.Trade.Dex.ProtocolFamily} ${row.Trade.Dex.ProtocolVersion}`
                        }, cell: function (row) {
                            return +row.count
                        }
                    },
                ],
                options: {
                    isStacked: true,
                    theme: 'material'
                }
            }
        }
    }

    class TopTradedNFTTokens extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0]?.ChainId
                },
                columns: [
                    {
                        name: 'NFT', cell: function (row) {
                            return {
                                currency: row.Trade.Buy.Currency.Symbol,
                                smartContract: row.Trade.Buy.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink, headerStyle: {width: '30%'},
                    },
                    {
                        name: 'Trades', cell: function (row) {
                            return row.count
                        },
                    },
                    {
                        name: 'Paid Amount', cell: function (row) {
                            return row.sell_amount
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Currency', cell: function (row) {
                            return {
                                currency: row.Trade.Sell.Currency.Symbol,
                                smartContract: row.Trade.Sell.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink,
                    },
                    {
                        name: 'Min Price', cell: function (row) {
                            return row.Trade.Buy.min_price
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Max Price', cell: function (row) {
                            return row.Trade.Buy.max_rice
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                ],
            }
        }
    }

    class TopTradedNFTTokensPie extends PieChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0]?.ChainId
                },
                columns: [
                    {
                        name: 'NFT', cell: function (row) {
                            return row.Trade.Buy.Currency.Symbol
                        }
                    },
                    {
                        name: 'Count', cell: function (row) {
                            return +row.count
                        }
                    }
                ],
                options: {
                    title: 'Trades Count',
                    height: 395
                }
            }
        }
    }

    class TopExchangesForNFTs extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0]?.ChainId
                },
                columns: [
                    {
                        name: 'Protocol', cell: function (row) {
                            return {
                                ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                                ProtocolName: row.Trade.Dex.ProtocolName,
                                ProtocolVersion: row.Trade.Dex.ProtocolVersion
                            }
                        }, rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'Trades', cell: function (row) {
                            return row.count
                        },
                    },
                    {
                        name: 'Unique NFTs traded', cell: function (row) {
                            return row.nfts
                        },
                    },
                    {
                        name: 'Unique Currencies Paid', cell: function (row) {
                            return row.currencies
                        },
                    },
                    {
                        name: 'Unique NFT Buyers', cell: function (row) {
                            return row.buyers
                        },
                    },
                ]
            }
        }
    }

    class TopExchangesForNFTsPie extends PieChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0]?.ChainId
                },
                columns: [
                    {
                        name: 'Protocol', cell: function (row) {
                            return `${row.Trade.Dex.ProtocolName} ${row.Trade.Dex.ProtocolVersion}`
                        }
                    },
                    {
                        name: 'Count', cell: function (row) {
                            return +row.count
                        }
                    }
                ],
                options: {
                    title: 'Trades Count',
                    height: 300,
                }
            }
        }
    }

    class SubscriptionLatestTradesNFTToken extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0]?.ChainId
                },
                columns: [
                    {
                        name: 'Time', cell: function (row) {
                            return row.Block.Time
                        }, rendering: renderDate,
                    },
                    {
                        name: 'Sell currency', cell: function (row) {
                            return {
                                currency: row.Trade.Sell.Currency.Symbol,
                                smartContract: row.Trade.Sell.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink, headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Seller', cell: function (row) {
                            return row.Trade.Buy.Seller
                        }, rendering: renderJustAddressLink,
                    },
                    {
                        name: '', cell: function () {
                            return ''
                        }, rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Buyer', cell: function (row) {
                            return row.Trade.Buy.Buyer
                        }, rendering: renderJustAddressLink,
                    },
                    {
                        name: 'NFT', cell: function (row) {
                            return {
                                currency: row.Trade.Buy.Currency.Symbol,
                                smartContract: row.Trade.Buy.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink, headerStyle: {width: '100px'},
                    },
                    {
                        name: 'ID', cell: function (row) {
                            return {id: row.Trade.Buy.Ids[0], address: row.Trade.Buy.Currency.SmartContract}
                        }, rendering: renderIdLink, headerStyle: {width: '70px'},
                    },
                    {
                        name: 'Sell amount', cell: function (row) {
                            return row.Trade.Sell.Amount
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Price', cell: function (row) {
                            return row.Trade.Buy.Price
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Dex', cell: function (row) {
                            return {
                                ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                                ProtocolName: row.Trade.Dex.ProtocolName,
                                ProtocolVersion: row.Trade.Dex.ProtocolVersion
                            }
                        }, rendering: renderDexProtocolLink,headerStyle: {width: '100px'},
                    },
                    {
                        name: 'Txn hash', cell: function (row) {
                            return row.Transaction.Hash
                        }, rendering: renderTX, headerStyle: {width: '100px'},
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        offset: 0,
        till: new Date().toISOString().slice(0, 10),
        from: (new Date((new Date()).setDate((new Date()).getDate() - 4))).toISOString().slice(0, 10)
    }
    renderWithTime(variables, <%= limited_date_range_limit(@from, @till).join(',').html_safe %>, function f(variables) {
        renderComponent('<%=@streaming_access_token %>',[[NFTTransfersByDate, '#NFTTransfersByDate']], 'NFT-Token-Transfers-By-Date_1', variables);
        renderComponent('<%=@streaming_access_token %>',[[NFTTransfersByDatePie, '#NFTTransfersByDatePie']], 'Top-transfered-NFT-tokens-in-network', variables);
        renderComponent('<%=@streaming_access_token %>',[[TopTransferNFT, '#TopTransferNFT']], 'Top-transfered-NFT-tokens-in-network_1', variables);
        renderComponent('<%=@streaming_access_token %>',[[NFTTokenTradesByDate, '#NFTTokenTradesByDate']], 'NFT-Token-Trades-By-Date_1_1', variables);
        renderComponent('<%=@streaming_access_token %>',[[TopTradedNFTTokens, '#TopTradedNFTTokens'], [TopTradedNFTTokensPie, '#TopTradedNFTTokensPie']], 'Top-traded-NFT-tokens-in-network_1', variables);
        renderComponent('<%=@streaming_access_token %>',[[TopExchangesForNFTs, '#TopExchangesForNFTs'], [TopExchangesForNFTsPie, '#TopExchangesForNFTsPie']], 'NFT-Marketplace-Data_1_1', variables);
    })
    renderComponent('<%=@streaming_access_token %>',[[SubscriptionLatestTradesNFTToken, '#SubscriptionLatestTradesNFTToken']], 'Subscription-Latest-Trades-of-NFT-Tokens-in-Network_1_1', variables, 'Subscription-Latest-Trades-of-NFT-Tokens-in-Network');
</script>
