<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div id="DEXProtocolNFTTokenTradesByDate" class="card"></div>
  </div>
</div>
<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div id="LiveTradesNFTTokenDEXProtocol" class="card"></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='DEXSmartContracts' class='card'></div>
  </div>
</div>
<script>
    class DEXProtocolNFTTokenTradesByDate extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.Block.Date
                        }
                    },
                    {
                        name: 'Count', cell: function (row) {
                            return +row.count
                        }
                    }
                ],
                options: {
                    title: 'Trades By Date',
                    height: 300
                }
            }
        }
    }

    class LiveTradesNFTTokenDEXProtocol extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                columns: [
                    {
                        name: 'Time', cell: function (row) {
                            return row.Block.Time
                        }, rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: function (row) {
                            return row.Block.Number
                        }, rendering: renderBlockLink,headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Buy price', cell: function (row) {
                            return row.Trade.Buy.Price
                        }, rendering: renderNumbersWithCurrency,  headerStyle: {textAlign: 'end'},
                    },

                    {
                        name: 'Buyer', cell: function (row) {
                            return row.Trade.Buy.Buyer
                        }, rendering: renderAddressLink,
                    },
                    {
                        name: '', cell: function (row) {
                            return ''
                        }, rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Seller', cell: function (row) {
                            return row.Trade.Buy.Seller
                        }, rendering: renderAddressLink,
                    },
                    {
                        name: 'Sell price', cell: function (row) {
                            return row.Trade.Sell.Price
                        }, rendering: renderNumbers,  headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Sell currency', cell: function (row) {
                            return {
                                currency: row.Trade.Sell.Currency.Symbol,
                                smartContract: row.Trade.Sell.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink,
                    },
                    {
                        name: 'Dex', cell: function (row) {
                            return {
                                ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                                ProtocolName: row.Trade.Dex.ProtocolName,
                                ProtocolVersion: row.Trade.Dex.ProtocolVersion
                            }
                        }, rendering: renderDexProtocolLink,headerStyle: {width: '100px'},
                    },
                    {
                        name: 'Transaction', cell: function (row) {
                            return row.Transaction.Hash
                        }, rendering: renderTX, headerStyle: {width: '100px'},
                    },
                ]
            }
        }
    }

    class DEXSmartContracts extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                columns: [
                    {
                        name: 'Smart Contract', cell: function (row) {
                            return row.Trade.Dex.SmartContract
                        }, rendering: renderJustAddressLink, headerStyle: {width: '30%'},
                    },
                    {
                        name: 'Protocol', cell: function (row) {
                            return {
                                ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                                ProtocolName: row.Trade.Dex.ProtocolName,
                                ProtocolVersion: row.Trade.Dex.ProtocolVersion
                            }
                        }, rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'Trades', cell: function (row) {
                            return row.trades
                        },
                    },
                    {
                        name: 'Currencies', cell: function (row) {
                            return row.currencies
                        },
                    },


                ]
            }
        }
    }
    const variables = {
        network: '<%= @streaming%>',
        limit: 10,
        offset: 0,
        protocol: '<%= @protocol %>',
        till: new Date().toISOString().slice(0, 10),
        from: (new Date((new Date()).setDate((new Date()).getDate() - 7))).toISOString().slice(0, 10)
    }
    renderWithTime(variables, <%= limited_date_range_limit(@from, @till).join(',').html_safe %>, function f(variables) {
        renderComponent([[DEXProtocolNFTTokenTradesByDate, "#DEXProtocolNFTTokenTradesByDate"]], 'DEX-Protocol-NFT-Token-Trades-By-Date_1', variables);
        renderComponent([[DEXSmartContracts, '#DEXSmartContracts']], 'DEX-Smart-Contracts', variables);
    })
    renderComponent([[LiveTradesNFTTokenDEXProtocol, "#LiveTradesNFTTokenDEXProtocol"]], 'Latest-Trades-of-NFT-Token-on-DEX-Protocol_3', variables, 'Live-Trades-of-NFT-on-DEX-Protocol_2');
</script>
