<div class='row mb-4'>
  <div class='col-12 col-xl-6'>
    <div class='card' id='BalanceHolderStatsLatestDate'></div>
  </div>
  <div class='col-12 col-xl-6'>
    <div class='card' id='TopHolders'></div>
  </div>
</div>
<div class='row mb-4'>
  <div class='col-12 col-xl-6'>
    <div class='card' id='HoldersCount'></div>
  </div>
  <div class='col-12 col-xl-6'>
    <div class='card' id='GiniIndex'></div>
  </div>
</div>
<div class='row mb-4'>
  <div class='col-12 col-xl-6'>
    <div class='card' id='NakamotoIndex'></div>
  </div>
  <div class='col-12 col-xl-6'>
    <div class='card' id='SupplyTokens'></div>
  </div>
</div>
<script>

    const tokenName = '<%= @token_info && @token_info.name ? @token_info.name : "-" %>';
    const tokenSymbol = '<%= @token_info && @token_info.symbol ? @token_info.symbol : "-" %>';

    class BalanceHolderStatsLatestDate extends BootstrapVerticalTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return [...response.EVM.date3]
                },
                chainId: function (response) {
                    return response.EVM.Blocks[0]?.ChainId
                },
                title: function (response) {
                    const tokenName = response.EVM.date1[0]?.Currency?.Name || response.EVM.date2[0]?.Currency?.Name || response.EVM.date3[0]?.Currency?.Name || 'no data'
                    const tokenSymbol = response.EVM.date1[0]?.Currency?.Symbol || response.EVM.date2[0]?.Currency?.Symbol || response.EVM.date3[0]?.Currency?.Symbol || 'no data'
                    return `${tokenName} (${tokenSymbol}) Token Holder Stats`
                },
                id: 'BalanceHolderStatsLatestDate',
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.BalanceUpdate.LastDate
                        }
                    },
                    {
                        name: 'Holder Count', cell: function (row) {
                            return row.count
                        },
                    },
                    {
                        name: 'Gini Factor', cell: function (row) {
                            return row.gini
                        },
                    },
                    {
                        name: 'Nakamoto Index', cell: function (row) {
                            return row.nakamoto
                        },
                    },
                    {
                        name: 'Total Supply', cell: function (row) {
                            return row.supply
                        },
                    },
                ]
            }
        }
    }

    class TopHolders extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return [...response.EVM.TokenHolders]
                },
                chainId: function (response) {
                    return response.EVM.Blocks[0]?.ChainId
                },
                title: function (response) {
                    const tokenName = response.EVM.TokenHolders[0]?.Currency?.Name || '-'
                    const tokenSymbol = response.EVM.TokenHolders[0]?.Currency?.Symbol || '-'
                    return `Top ${tokenName} (${tokenSymbol}) Token Holders`
                },
                id: 'TopHolders',
                columns: [
                    {
                        name: 'Holder', cell: function (row) {
                            return row.Holder.Address
                        }, rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Amount', cell: function (row) {
                            return row.Balance.Amount
                        }, rendering: renderNumbers, headerStyle: {textAlign: 'end', width: '35%'},
                    },
                ]
            }
        }
    }

    class HoldersCount extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return [...response.EVM.date1, ...response.EVM.date2, ...response.EVM.date3]
                },
                chainId: function (response) {
                    return response.EVM.Blocks[0]?.ChainId
                },
                title: function (response) {
                    const tokenName = response.EVM.date1[0]?.Currency?.Name || response.EVM.date2[0]?.Currency?.Name || response.EVM.date3[0]?.Currency?.Name || 'no data'
                    const tokenSymbol = response.EVM.date1[0]?.Currency?.Symbol || response.EVM.date2[0]?.Currency?.Symbol || response.EVM.date3[0]?.Currency?.Symbol || 'no data'
                    return `${tokenName} (${tokenSymbol}) Token holders count`
                },
                id: 'HoldersCount',
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.BalanceUpdate.LastDate
                        }
                    },
                    {
                        name: 'Count', cell: function (row) {
                            return +row.count
                        }
                    }
                ],
                options: {
                    height: 300,
                    vAxis: {minValue: 0},
                    theme: 'material',
                }
            }
        }
    }

    class GiniIndex extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return [...response.EVM.date1, ...response.EVM.date2, ...response.EVM.date3]
                },
                chainId: function (response) {
                    return response.EVM.Blocks[0]?.ChainId
                },
                title: function (response) {
                    const tokenName = response.EVM.date1[0]?.Currency?.Name || response.EVM.date2[0]?.Currency?.Name || response.EVM.date3[0]?.Currency?.Name || 'no data'
                    const tokenSymbol = response.EVM.date1[0]?.Currency?.Symbol || response.EVM.date2[0]?.Currency?.Symbol || response.EVM.date3[0]?.Currency?.Symbol || 'no data'
                    return `${tokenName} (${tokenSymbol}) Gini Factor`
                },
                id: 'GiniIndex',
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.BalanceUpdate.LastDate
                        }
                    },
                    {
                        name: 'gini', cell: function (row) {
                            return +row.gini
                        }
                    }
                ],
                options: {
                    height: 300,theme: 'material',
                }
            }
        }
    }

    class NakamotoIndex extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return [...response.EVM.date1, ...response.EVM.date2, ...response.EVM.date3]
                },
                chainId: function (response) {
                    return response.EVM.Blocks[0]?.ChainId
                },
                title: function (response) {
                    const tokenName = response.EVM.date1[0]?.Currency?.Name || response.EVM.date2[0]?.Currency?.Name || response.EVM.date3[0]?.Currency?.Name || 'no data'
                    const tokenSymbol = response.EVM.date1[0]?.Currency?.Symbol || response.EVM.date2[0]?.Currency?.Symbol || response.EVM.date3[0]?.Currency?.Symbol || 'no data'
                    return `${tokenName} (${tokenSymbol}) Nakamoto Index`
                },
                id: 'NakamotoIndex',
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.BalanceUpdate.LastDate
                        }
                    },
                    {
                        name: 'nakamoto', cell: function (row) {
                            return +row.nakamoto
                        }
                    }
                ],
                options: {
                    height: 300,
                }
            }
        }
    }

    class SupplyTokens extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return [...response.EVM.date1, ...response.EVM.date2, ...response.EVM.date3]
                },
                chainId: function (response) {
                    return response.EVM.Blocks[0]?.ChainId
                },
                title: function (response) {
                    const tokenName = response.EVM.date1[0]?.Currency?.Name || response.EVM.date2[0]?.Currency?.Name || response.EVM.date3[0]?.Currency?.Name || 'no data'
                    const tokenSymbol = response.EVM.date1[0]?.Currency?.Symbol || response.EVM.date2[0]?.Currency?.Symbol || response.EVM.date3[0]?.Currency?.Symbol || 'no data'
                    return `${tokenName} (${tokenSymbol}) Total Supply`
                },
                id: 'SupplyTokens',
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.BalanceUpdate.LastDate
                        }
                    },
                    {
                        name: 'supply', cell: function (row) {
                            return +row.supply
                        }
                    }
                ],
                options: {
                    height: 300,
                    vAxis: {minValue: 0}
                }
            }
        }
    }


    const variables = {
        network: '<%= @streaming%>',
        token: '<%= @address %>',
        till: new Date().toISOString().slice(0, 10),
    }
    renderWithTime(variables, <%= limited_date_range_limit(@from, @till).join(',').html_safe %>, function f(variables) {
        renderComponent('<%=@streaming_access_token %>', [[HoldersCount, '#HoldersCount'], [GiniIndex, '#GiniIndex'], [NakamotoIndex, '#NakamotoIndex'], [SupplyTokens, '#SupplyTokens'], [BalanceHolderStatsLatestDate, '#BalanceHolderStatsLatestDate']], 'Balance-holder-stats_4', variables);
    })
    renderComponent('<%=@streaming_access_token %>', [[TopHolders, '#TopHolders']], 'Top-holders_4', variables);
</script>
